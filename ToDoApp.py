{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "02e73f35-aa08-4c1c-b4cc-0e5e6e6aff1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importin GUI\n",
    "import tkinter as tk\n",
    "from tkinter import messagebox, simpledialog\n",
    "\n",
    "#importing json\n",
    "import json\n",
    "import os\n",
    "\n",
    "\n",
    "DATA_FILE = \"todolist.json\"\n",
    "'''json file to save the data'''\n",
    "\n",
    "#adding classes for the overview\n",
    "\n",
    "class Task:\n",
    "    '''Representing the various functions like completion, reminding, and marking the task as important'''\n",
    "    def __init__(self, description):\n",
    "        '''adding descriptions to each task'''\n",
    "        self.description = description\n",
    "        self.completed = False\n",
    "        self.important = False\n",
    "        self.reminder = None\n",
    "\n",
    "    def mark_completed(self):\n",
    "        '''task completed'''\n",
    "        self.completed = True\n",
    "\n",
    "    def set_reminder(self, day):\n",
    "        '''setting the reminder'''\n",
    "        self.reminder = day\n",
    "\n",
    "    def mark_important(self):\n",
    "        '''making sure to add an important mark to distinguish between all the tasks'''\n",
    "        self.important = True\n",
    "\n",
    "    def __str__(self):\n",
    "        status = '[x]' if self.completed else '[ ]'\n",
    "        important = '(!)' if self.important else ''\n",
    "        reminder = f\" - Reminder: {self.reminder}\" if self.reminder else ''\n",
    "        return f\"{status} {self.description} {important}{reminder}\"\n",
    "\n",
    "class User:\n",
    "    '''Showing the user with the chosen username, password, and the list of tasks they added'''\n",
    "    def __init__(self, username, password):\n",
    "        self.username = username\n",
    "        self.password = password\n",
    "        self.tasks = []\n",
    "\n",
    "    def add_task(self, description):\n",
    "        '''adding task'''\n",
    "        task = Task(description)\n",
    "        self.tasks.append(task)\n",
    "\n",
    "    def delete_task(self, index):\n",
    "        if 0 <= index < len(self.tasks):\n",
    "            del self.tasks[index]\n",
    "\n",
    "    def list_tasks(self):\n",
    "        return [str(task) for task in self.tasks]\n",
    "\n",
    "class ToDoApp(tk.Tk):\n",
    "    '''Main application class/ includes the GUI as well as the user interactions'''\n",
    "    def __init__(self):\n",
    "        '''Initialize the to-do list app GUI and loads the login screen'''\n",
    "        super().__init__()\n",
    "        self.title(\"To-Do List App\")\n",
    "        self.geometry('400x500')\n",
    "        self.configure(bg='#f0f8ff')\n",
    "        self.users = {}\n",
    "        self.load_data()  # Load data from json file\n",
    "        self.current_user = None\n",
    "        self.login_screen()\n",
    "\n",
    "    def save_data(self):\n",
    "        \"\"\"Save all user data to a JSON file.\"\"\"\n",
    "        data = {}\n",
    "        for username, user in self.users.items():\n",
    "            data[username] = {\n",
    "                'password': user.password,\n",
    "                'tasks': [{\n",
    "                    'description': t.description,\n",
    "                    'completed': t.completed,\n",
    "                    'important': t.important,\n",
    "                    'reminder': t.reminder\n",
    "                } for t in user.tasks]\n",
    "            }\n",
    "        with open(DATA_FILE, 'w') as f:\n",
    "            json.dump(data, f, indent=4)\n",
    "\n",
    "    def load_data(self):\n",
    "        \"\"\"Load user data from a JSON file.\"\"\"\n",
    "        if os.path.exists(DATA_FILE):\n",
    "            with open(DATA_FILE, 'r') as f:\n",
    "                raw_data = json.load(f)\n",
    "                for username, udata in raw_data.items():\n",
    "                    user = User(username, udata['password'])\n",
    "                    for tdata in udata['tasks']:\n",
    "                        task = Task(tdata['description'])\n",
    "                        task.completed = tdata['completed']\n",
    "                        task.important = tdata['important']\n",
    "                        task.reminder = tdata['reminder']\n",
    "                        user.tasks.append(task)\n",
    "                    self.users[username] = user\n",
    "\n",
    "    # GUI Screens\n",
    "    def login_screen(self):\n",
    "        '''Login and registration screen'''\n",
    "        self.clear_window()\n",
    "        tk.Label(self, text='To-Do List App', font=('Helvetica', 18, 'bold'), bg='#f0f8ff', fg='#4682b4').pack(pady=20)\n",
    "        tk.Label(self, text='Login or Register', font=('Arial', 14), bg='#f0f8ff', fg='#5f9ea0').pack(pady=10)\n",
    "        tk.Button(self, text='Login', command=self.login, bg='#5f9ea0', fg='white', width=15).pack(pady=10)\n",
    "        tk.Button(self, text='Register', command=self.register, bg='#4682b4', fg='white', width=15).pack(pady=10)\n",
    "\n",
    "    def task_screen(self):\n",
    "        '''Displaying the functions on the screen for the user'''\n",
    "        #Using colors that are aesthetically pleasing for the user \n",
    "        self.clear_window()\n",
    "        tk.Label(self, text=f\"Welcome {self.current_user.username}\", font=('Helvetica', 16, 'bold'), bg='#f0f8ff', fg='#4682b4').pack(pady=10)\n",
    "        self.task_listbox = tk.Listbox(self, width=50, height=15, bg='#ffffff', fg='#000000', selectbackground='#4682b4', selectforeground='white')\n",
    "        self.task_listbox.pack(pady=10)\n",
    "        self.refresh_task_list()\n",
    "\n",
    "        tk.Button(self, text='Add Task', command=self.add_task, bg='#4682b4', fg='white', width=20).pack(pady=5)\n",
    "        tk.Button(self, text='Mark as Done', command=self.mark_done, bg='#5f9ea0', fg='white', width=20).pack(pady=5)\n",
    "        tk.Button(self, text='Delete Task', command=self.delete_task, bg='#4682b4', fg='white', width=20).pack(pady=5)\n",
    "        tk.Button(self, text='Add Reminder', command=self.add_reminder, bg='#5f9ea0', fg='white', width=20).pack(pady=5)\n",
    "        tk.Button(self, text='Mark as Important', command=self.mark_important, bg='#4682b4', fg='white', width=20).pack(pady=5)\n",
    "        tk.Button(self, text='Logout', command=self.logout, bg='#5f9ea0', fg='white', width=20).pack(pady=10)\n",
    "\n",
    "    # GUI Actions\n",
    "    def register(self):\n",
    "        '''Register a new user where they can choose their username and password'''\n",
    "        username = simpledialog.askstring('Register', 'Username:')\n",
    "        if username in self.users:\n",
    "            messagebox.showerror('Error', 'Username already exists.')\n",
    "            return\n",
    "        password = simpledialog.askstring('Register', 'Password:', show='*')\n",
    "        self.users[username] = User(username, password)\n",
    "        self.save_data()  # Save data to JSON after registration\n",
    "        messagebox.showinfo('Success', 'Registration complete.')\n",
    "\n",
    "    def login(self):\n",
    "        '''Login with the username and password they chose'''\n",
    "        username = simpledialog.askstring('Login', 'Username:')\n",
    "        password = simpledialog.askstring('Login', 'Password:', show='*')\n",
    "        user = self.users.get(username)\n",
    "        if user and user.password == password:\n",
    "            self.current_user = user\n",
    "            self.task_screen()\n",
    "        else:\n",
    "            messagebox.showerror('Error', 'Invalid credentials.')\n",
    "\n",
    "    def logout(self):\n",
    "        '''Log out the current user and return them to the login screen'''\n",
    "        self.current_user = None\n",
    "        self.login_screen()\n",
    "\n",
    "    def add_task(self):\n",
    "        '''Add task to the current user's list'''\n",
    "        desc = simpledialog.askstring('New Task', 'Enter task description:')\n",
    "        if desc:\n",
    "            self.current_user.add_task(desc)\n",
    "            self.save_data()  # Save data after adding a task\n",
    "            self.refresh_task_list()\n",
    "\n",
    "    def mark_done(self):\n",
    "        '''Mark selected task as done'''\n",
    "        selected = self.task_listbox.curselection()\n",
    "        if selected:\n",
    "            index = selected[0]\n",
    "            self.current_user.tasks[index].mark_completed()\n",
    "            self.save_data()  # Save data after marking a task done\n",
    "            self.refresh_task_list()\n",
    "        else:\n",
    "            messagebox.showwarning('Warning', 'No task selected.')\n",
    "\n",
    "    def delete_task(self):\n",
    "        '''Delete selected task from the list'''\n",
    "        selected = self.task_listbox.curselection()\n",
    "        if selected:\n",
    "            index = selected[0]\n",
    "            self.current_user.delete_task(index)\n",
    "            self.save_data()  # Save data after deleting a task\n",
    "            self.refresh_task_list()\n",
    "        else:\n",
    "            messagebox.showwarning('Warning', 'No task selected.')\n",
    "\n",
    "    def add_reminder(self):\n",
    "        '''Add reminder to selected task/ reminder dont have the limit for weekdays and user can choose freely what the reminder can be'''\n",
    "        selected = self.task_listbox.curselection()\n",
    "        if selected:\n",
    "            index = selected[0]\n",
    "            reminder = simpledialog.askstring('Add Reminder', 'Enter reminder (e.g., Monday):')\n",
    "            if reminder:\n",
    "                self.current_user.tasks[index].set_reminder(reminder)\n",
    "                self.save_data()  # Save data after adding reminder\n",
    "                self.refresh_task_list()\n",
    "        else:\n",
    "            messagebox.showwarning('Warning', 'No task selected.')\n",
    "\n",
    "    def mark_important(self):\n",
    "        '''Mark selected task as important'''\n",
    "        selected = self.task_listbox.curselection()\n",
    "        if selected:\n",
    "            index = selected[0]\n",
    "            self.current_user.tasks[index].mark_important()\n",
    "            self.save_data()  # Save data after marking a task important\n",
    "            self.refresh_task_list()\n",
    "        else:\n",
    "            messagebox.showwarning('Warning', 'No task selected.')\n",
    "\n",
    "    def refresh_task_list(self):\n",
    "        '''Refresh and update the task listbox'''\n",
    "        self.task_listbox.delete(0, tk.END)\n",
    "        for task in self.current_user.tasks:\n",
    "            self.task_listbox.insert(tk.END, str(task))\n",
    "\n",
    "    def clear_window(self):\n",
    "        '''Clear all widgets from the current window'''\n",
    "        for widget in self.winfo_children():\n",
    "            widget.destroy()\n",
    "\n",
    "# Start the application\n",
    "if __name__ == '__main__':\n",
    "    app = ToDoApp()\n",
    "    app.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c036544-c966-41ad-8b93-59538ae7d8d0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
